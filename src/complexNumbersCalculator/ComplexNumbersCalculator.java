/* Generated By:JJTree&JavaCC: Do not edit this line. ComplexNumbersCalculator.java */
package complexNumbersCalculator;

public class ComplexNumbersCalculator/*@bgen(jjtree)*/implements ComplexNumbersCalculatorTreeConstants, ComplexNumbersCalculatorConstants {/*@bgen(jjtree)*/
  protected static JJTComplexNumbersCalculatorState jjtree = new JJTComplexNumbersCalculatorState();private static ComplexNumber previousValue = null;
        private static ComplexNumber value = null;
        private static int end = 0;

        public static void main( String[] args ) throws ParseException
        {
                ComplexNumbersCalculator parser = new ComplexNumbersCalculator(System.in);
                System.out.println("Witaj w kalkulatorze liczb zespolonych by Bolo Team!");
                System.out.println("Dost\u0119pne narz\u0119dzia:");
                System.out.println("Dzia\u0142ania: dodawanie('+'), odejmowanie('-'), mno\u017cenie('*'), dzielenie('/')");
                System.out.println("Nawiasy: '(', ')'");
                System.out.println("Wynik poprzedniego dzia\u0142ania: '$'");
                System.out.println("Cz\u0119\u015b\u0107 rzeczywista: 're(liczba)'");
                System.out.println("Cz\u0119\u015b\u0107 urojona: 'im(liczba)'");
                System.out.println("Sprz\u0119\u017cenie: 'con(liczba)'");
                System.out.println("Aby uzyska\u0107 wynik po wpisaniu wyra\u017cenia u\u017cyj znaku ';'");
                System.out.println("Wszystkie obliczenia przeprowadzane s\u0105 w postaci kanonicznej");
                System.out.println("Liczba w postaci trygonometrycznej: 'cos(k\u0105t)+isin(k\u0105t)'");
                System.out.println("Liczba w postaci wyk\u0142adniczej: 'e^(ik\u0105t)'");
                System.out.println("Aby zako\u0144czy\u0107 dzia\u0142anie programu u\u017cyj komendy 'end'");
                System.out.println();
                while (end==0)
        {
                System.out.print("Wprowad\u017a wyra\u017cenie: ");
                try
                {
                        SimpleNode n = ComplexNumbersCalculator.start();
                        System.out.println("Drzewo rozbioru syntaktycznego:");
                        n.dump("");
                        System.out.println();
                        ComplexNumbersCalculatorTmpVisitor v = new ComplexNumbersCalculatorTmpVisitor();
                        n.childrenAccept(v, null);
                        switch (end)
                        {
                                case 0:
                                System.out.println("Wprowadzono poprawne wyra\u017cenie");
                                System.out.println("Wynik: " + value.toString());
                                System.out.println();
                                previousValue = value;
                                break;
                                case 1:
                                System.out.println("Nast\u0105pi zako\u0144czenie programu");
                                break;
                                default :
                                break;
                        }
                }
                catch(Exception e)
                {
                                System.out.println("Wprowadzono niepoprawne wyra\u017cenie");
                        System.out.println(e.getMessage());
                        parser.ReInit(System.in);
                }
                catch(Error er)
                {
                                System.out.println("Wprowadzono niepoprawne wyra\u017cenie");
                                System.out.println("B\u0142\u0105d. Za chwil\u0119 nast\u0105pi zako\u0144czenie programu");
                        System.out.println(er.getMessage());
                        break;
                }
        }
        }

  static final public SimpleNode start() throws ParseException {
 /*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case OPEN_PAR:
      case PREVIOUS:
      case COMPLEX_NUMBER:
      case REAL_PART:
      case IMAGINARY_PART:
      case CONJUGATE:
      case SINUS:
      case COSINUS:
      case E:
        value = expression();
                               SimpleNode jjtn001 = new SimpleNode(JJTSEMICOLON);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(20);
        } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, true);
                               }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
        break;
      case 21:
          SimpleNode jjtn002 = new SimpleNode(JJTEND);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(21);
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                end = 1;
                {if (true) return jjtn000;}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ComplexNumber expression() throws ParseException {
 /*@bgen(jjtree) expression */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ComplexNumber i;
        ComplexNumber val;
    try {
      val = term();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
                  SimpleNode jjtn001 = new SimpleNode(JJTPLUS);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(PLUS);
          } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
          }
          i = term();
                        val = val.add(i);
          break;
        case MINUS:
                  SimpleNode jjtn002 = new SimpleNode(JJTMINUS);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(MINUS);
          } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
          }
          i = term();
                        val = val.subtract(i);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return val ;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ComplexNumber term() throws ParseException {
 /*@bgen(jjtree) term */
        SimpleNode jjtn000 = new SimpleNode(JJTTERM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ComplexNumber i ;
        ComplexNumber val ;
    try {
      val = primary();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
                  SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLY);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(MULTIPLY);
          } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
          }
          i = primary();
                  val = val.multiply(i);
          break;
        case DIVIDE:
                  SimpleNode jjtn002 = new SimpleNode(JJTDIVIDE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(DIVIDE);
          } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
          }
          i = primary();
                        if(i.getImaginaryPart()==0) val = val.divide(i.getRealPart());
                        else val = val.divide(i);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return val ;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ComplexNumber primary() throws ParseException {
 /*@bgen(jjtree) primary */
        SimpleNode jjtn000 = new SimpleNode(JJTPRIMARY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t ;
        ComplexNumber cn = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREVIOUS:
          SimpleNode jjtn001 = new SimpleNode(JJTPREVIOUS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(PREVIOUS);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return previousValue ;}
        break;
      case OPEN_PAR:
          SimpleNode jjtn002 = new SimpleNode(JJTOPEN_PAR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(OPEN_PAR);
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
        cn = expression();
                                               SimpleNode jjtn003 = new SimpleNode(JJTCLOSE_PAR);
                                               boolean jjtc003 = true;
                                               jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(CLOSE_PAR);
        } finally {
                                               if (jjtc003) {
                                                 jjtree.closeNodeScope(jjtn003, true);
                                               }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return cn ;}
        break;
      case MINUS:
          SimpleNode jjtn004 = new SimpleNode(JJTMINUS);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(MINUS);
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
        cn = primary();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                cn = cn.negation();
                {if (true) return cn;}
        break;
      case COMPLEX_NUMBER:
          SimpleNode jjtn005 = new SimpleNode(JJTCOMPLEX_NUMBER);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        try {
          t = jj_consume_token(COMPLEX_NUMBER);
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if(!t.image.contains("i"))
                {
                        {if (true) return new ComplexNumber(Double.parseDouble(t.image));}
                }
                else
                {
                        String s = t.image;
                        s = s.replace("i", "");
                        if(s.length()==0) {if (true) return new ComplexNumber(0.0, 1.0);}
                        else {if (true) return new ComplexNumber(0.0, Double.parseDouble(s));}
                }
        break;
      case COSINUS:
          SimpleNode jjtn006 = new SimpleNode(JJTCOSINUS);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        try {
          t = jj_consume_token(COSINUS);
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                String str = t.image;
                str = str.replace("(", "");
                str = str.replace(")", "");
                str = str.replace("cos", "");
                cn = new ComplexNumber(Math.cos(Math.toRadians(Double.parseDouble(str))));
                {if (true) return cn;}
        break;
      case SINUS:
          SimpleNode jjtn007 = new SimpleNode(JJTSINUS);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
        try {
          t = jj_consume_token(SINUS);
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                String str2 = t.image;
                str2 = str2.replace("(", "");
                str2 = str2.replace(")", "");
                str2 = str2.replace("sin", "");
                if(!str2.contains("i")) {if (true) return new ComplexNumber(Math.sin(Math.toRadians(Double.parseDouble(str2))));}
                else
                {
                        str2 = str2.replace("i", "");
                        {if (true) return new ComplexNumber(0.0, Math.sin(Math.toRadians(Double.parseDouble(str2))));}
                }
        break;
      case E:
          SimpleNode jjtn008 = new SimpleNode(JJTE);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
        try {
          t = jj_consume_token(E);
        } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                String str3 = t.image;
                str3 = str3.replace("e^", "");
                str3 = str3.replace("(", "");
                str3 = str3.replace(")", "");
                str3 = str3.replace("*", "");
                str3 = str3.replace("i", "");
                {if (true) return new ComplexNumber(Math.cos(Math.toRadians(Double.parseDouble(str3))), Math.sin(Math.toRadians(Double.parseDouble(str3))));}
        break;
      case REAL_PART:
          SimpleNode jjtn009 = new SimpleNode(JJTREAL_PART);
          boolean jjtc009 = true;
          jjtree.openNodeScope(jjtn009);
        try {
          jj_consume_token(REAL_PART);
        } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, true);
          }
        }
                                 SimpleNode jjtn010 = new SimpleNode(JJTOPEN_PAR);
                                 boolean jjtc010 = true;
                                 jjtree.openNodeScope(jjtn010);
        try {
          jj_consume_token(OPEN_PAR);
        } finally {
                                 if (jjtc010) {
                                   jjtree.closeNodeScope(jjtn010, true);
                                 }
        }
        cn = expression();
                                                                      SimpleNode jjtn011 = new SimpleNode(JJTCLOSE_PAR);
                                                                      boolean jjtc011 = true;
                                                                      jjtree.openNodeScope(jjtn011);
        try {
          jj_consume_token(CLOSE_PAR);
        } finally {
                                                                      if (jjtc011) {
                                                                        jjtree.closeNodeScope(jjtn011, true);
                                                                      }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                cn = new ComplexNumber(cn.getRealPart());
                {if (true) return cn;}
        break;
      case IMAGINARY_PART:
          SimpleNode jjtn012 = new SimpleNode(JJTIMAGINARY_PART);
          boolean jjtc012 = true;
          jjtree.openNodeScope(jjtn012);
        try {
          jj_consume_token(IMAGINARY_PART);
        } finally {
          if (jjtc012) {
            jjtree.closeNodeScope(jjtn012, true);
          }
        }
                                           SimpleNode jjtn013 = new SimpleNode(JJTOPEN_PAR);
                                           boolean jjtc013 = true;
                                           jjtree.openNodeScope(jjtn013);
        try {
          jj_consume_token(OPEN_PAR);
        } finally {
                                           if (jjtc013) {
                                             jjtree.closeNodeScope(jjtn013, true);
                                           }
        }
        cn = expression();
                                                                                SimpleNode jjtn014 = new SimpleNode(JJTCLOSE_PAR);
                                                                                boolean jjtc014 = true;
                                                                                jjtree.openNodeScope(jjtn014);
        try {
          jj_consume_token(CLOSE_PAR);
        } finally {
                                                                                if (jjtc014) {
                                                                                  jjtree.closeNodeScope(jjtn014, true);
                                                                                }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                cn = new ComplexNumber(0.0, cn.getImaginaryPart());
                {if (true) return cn;}
        break;
      case CONJUGATE:
          SimpleNode jjtn015 = new SimpleNode(JJTCONJUGATE);
          boolean jjtc015 = true;
          jjtree.openNodeScope(jjtn015);
        try {
          jj_consume_token(CONJUGATE);
        } finally {
          if (jjtc015) {
            jjtree.closeNodeScope(jjtn015, true);
          }
        }
                                 SimpleNode jjtn016 = new SimpleNode(JJTOPEN_PAR);
                                 boolean jjtc016 = true;
                                 jjtree.openNodeScope(jjtn016);
        try {
          jj_consume_token(OPEN_PAR);
        } finally {
                                 if (jjtc016) {
                                   jjtree.closeNodeScope(jjtn016, true);
                                 }
        }
        cn = expression();
                                                                      SimpleNode jjtn017 = new SimpleNode(JJTCLOSE_PAR);
                                                                      boolean jjtc017 = true;
                                                                      jjtree.openNodeScope(jjtn017);
        try {
          jj_consume_token(CLOSE_PAR);
        } finally {
                                                                      if (jjtc017) {
                                                                        jjtree.closeNodeScope(jjtn017, true);
                                                                      }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                cn = cn.conjugate();
                {if (true) return cn;}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ComplexNumbersCalculatorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2ff440,0x60,0x60,0x180,0x180,0xff440,};
   }

  /** Constructor with InputStream. */
  public ComplexNumbersCalculator(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ComplexNumbersCalculator(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ComplexNumbersCalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ComplexNumbersCalculator(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ComplexNumbersCalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ComplexNumbersCalculator(ComplexNumbersCalculatorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ComplexNumbersCalculatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
