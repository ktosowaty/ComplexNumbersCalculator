/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ComplexNumbersCalculator.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options
{
	STATIC = true;
	               
}

PARSER_BEGIN(ComplexNumbersCalculator)

package complexNumbersCalculator;

public class ComplexNumbersCalculator/*@bgen(jjtree)*/implements ComplexNumbersCalculatorTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTComplexNumbersCalculatorState jjtree = new JJTComplexNumbersCalculatorState();

/*@egen*/
	private static ComplexNumber previousValue = null;
	private static ComplexNumber value = null;
	private static int end = 0;
	
	public static void main( String[] args ) throws ParseException
	{
		ComplexNumbersCalculator parser = new ComplexNumbersCalculator(System.in);
		System.out.println("Witaj w kalkulatorze liczb zespolonych by Bolo Team!");
		System.out.println("Dost\u0119pne narz\u0119dzia:");
		System.out.println("Dzia\u0142ania: dodawanie('+'), odejmowanie('-'), mno\u017cenie('*'), dzielenie('/')");
		System.out.println("Nawiasy: '(', ')'");
		System.out.println("Wynik poprzedniego dzia\u0142ania: '$'");
		System.out.println("Cz\u0119\u015b\u0107 rzeczywista: 're(liczba)'");
		System.out.println("Cz\u0119\u015b\u0107 urojona: 'im(liczba)'");
		System.out.println("Sprz\u0119\u017cenie: 'con(liczba)'");
		System.out.println("Aby uzyska\u0107 wynik po wpisaniu wyra\u017cenia u\u017cyj znaku ';'");
		System.out.println("Wszystkie obliczenia przeprowadzane s\u0105 w postaci kanonicznej");
		System.out.println("Liczba w postaci trygonometrycznej: 'cos(k\u0105t)+isin(k\u0105t)'");
		System.out.println("Liczba w postaci wyk\u0142adniczej: 'e^(ik\u0105t)'");
		System.out.println("Aby zako\u0144czy\u0107 dzia\u0142anie programu u\u017cyj komendy 'end'");
		System.out.println();		
		while (end==0)
    	{
      		System.out.print("Wprowad\u017a wyra\u017cenie: ");
      		try
      		{
      			SimpleNode n = ComplexNumbersCalculator.start();
      			System.out.println("Drzewo rozbioru syntaktycznego:");
      			n.dump("");
      			System.out.println();
      			ComplexNumbersCalculatorTmpVisitor v = new ComplexNumbersCalculatorTmpVisitor();
      			n.childrenAccept(v, null);
        		switch (end)
        		{
          			case 0: 
          			System.out.println("Wprowadzono poprawne wyra\u017cenie");
          			System.out.println("Wynik: " + value.toString());
          			System.out.println();
          			previousValue = value;
          			break;
          			case 1: 
          			System.out.println("Nast\u0105pi zako\u0144czenie programu");
          			break;
          			default : 
          			break;
        		}
	      	}
      		catch(Exception e)
      		{
				System.out.println("Wprowadzono niepoprawne wyra\u017cenie");
      			System.out.println(e.getMessage());
      			parser.ReInit(System.in);
      		}
      		catch(Error er)
      		{
				System.out.println("Wprowadzono niepoprawne wyra\u017cenie");
				System.out.println("B\u0142\u0105d. Za chwil\u0119 nast\u0105pi zako\u0144czenie programu");
        		System.out.println(er.getMessage());
       		 	break;
      		}
    	}
	}
}

PARSER_END(ComplexNumbersCalculator)

SKIP: { " " | "\t" | "\n" | "\r" }
TOKEN: { < PLUS : "+" > }
TOKEN: { < MINUS : "-" > }
TOKEN: { < MULTIPLY : "*" > }
TOKEN: { < DIVIDE : "/" > }
TOKEN: { < #NUMBER : (["0"-"9"])+ | (["0"-"9"])+ "." (["0"-"9"])+ | (["0"-"9"])+ "." | "." (["0"-"9"])+ > }
TOKEN: { < OPEN_PAR : "(" > }
TOKEN: { < CLOSE_PAR : ")" > }
TOKEN: { < PREVIOUS : "$" > }
TOKEN: { < COMPLEX_NUMBER : <NUMBER>"i" | "i" | <NUMBER> > }
TOKEN: { < REAL_PART : "re" > }
TOKEN: { < IMAGINARY_PART : "im" > }
TOKEN: { < CONJUGATE : "con" > }

TOKEN: { < SINUS : ("i")?("sin"<NUMBER> | "sin"<OPEN_PAR><NUMBER><CLOSE_PAR>) > }
TOKEN: { < COSINUS : "cos"<NUMBER> | "cos"<OPEN_PAR><NUMBER><CLOSE_PAR> > }
TOKEN: { < E : "e^"<OPEN_PAR>"i"(<MULTIPLY>)?<NUMBER><CLOSE_PAR> > }

SimpleNode start() :
{/*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) start */
        try {
/*@egen*/
	value = expression()/*@bgen(jjtree) semicolon */
                             {
                               SimpleNode jjtn001 = new SimpleNode(JJTSEMICOLON);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, true);
                               }
                             }
/*@egen*/           /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}
|/*@bgen(jjtree) end */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTEND);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
	"end"/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/     /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		end = 1;
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ComplexNumber expression():
{/*@bgen(jjtree) expression */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ComplexNumber i;
	ComplexNumber val;
}
{/*@bgen(jjtree) expression */
        try {
/*@egen*/
	val = term()
	(/*@bgen(jjtree) plus */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTPLUS);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		<PLUS>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/      
		i = term()
		{
			val = val.add(i);
		}
	|/*@bgen(jjtree) minus */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTMINUS);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/
		<MINUS>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/       
		i = term()
		{
			val = val.subtract(i);
		} 
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return val ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ComplexNumber term():
{/*@bgen(jjtree) term */
        SimpleNode jjtn000 = new SimpleNode(JJTTERM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ComplexNumber i ;
	ComplexNumber val ;
}
{/*@bgen(jjtree) term */
        try {
/*@egen*/
	val = primary()
	(/*@bgen(jjtree) multiply */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLY);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		<MULTIPLY>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/          
		i = primary()
		{ val = val.multiply(i); }
	|/*@bgen(jjtree) divide */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTDIVIDE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/
		<DIVIDE>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/        
		i = primary()
		{
		 	if(i.getImaginaryPart()==0) val = val.divide(i.getRealPart());
		 	else val = val.divide(i);
		}		  
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return val ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ComplexNumber primary():
{/*@bgen(jjtree) primary */
        SimpleNode jjtn000 = new SimpleNode(JJTPRIMARY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t ;
	ComplexNumber cn = null;
}
{/*@bgen(jjtree) primary */
        try {
/*@egen*//*@bgen(jjtree) previous */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTPREVIOUS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	<PREVIOUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/          /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return previousValue ; }
|/*@bgen(jjtree) open_par */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTOPEN_PAR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
	<OPEN_PAR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/           cn=expression()/*@bgen(jjtree) close_par */
                                             {
                                               SimpleNode jjtn003 = new SimpleNode(JJTCLOSE_PAR);
                                               boolean jjtc003 = true;
                                               jjtree.openNodeScope(jjtn003);
                                             }
                                             try {
/*@egen*/ <CLOSE_PAR>/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc003) {
                                                 jjtree.closeNodeScope(jjtn003, true);
                                               }
                                             }
/*@egen*/           /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return cn ; }
|/*@bgen(jjtree) minus */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTMINUS);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
	<MINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/        cn=primary()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		cn = cn.negation();
		return cn;
	}
|/*@bgen(jjtree) complex_number */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTCOMPLEX_NUMBER);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/
	t=<COMPLEX_NUMBER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/                /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		if(!t.image.contains("i"))
		{
			return new ComplexNumber(Double.parseDouble(t.image));
		}
		else
		{
			String s = t.image;
			s = s.replace("i", "");
			if(s.length()==0) return new ComplexNumber(0.0, 1.0);
			else return new ComplexNumber(0.0, Double.parseDouble(s));
		}
		
	}
|/*@bgen(jjtree) cosinus */
        {
          SimpleNode jjtn006 = new SimpleNode(JJTCOSINUS);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        }
        try {
/*@egen*/ 
	t=<COSINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
/*@egen*/         /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		String str = t.image;
		str = str.replace("(", "");
		str = str.replace(")", "");
		str = str.replace("cos", "");
		cn = new ComplexNumber(Math.cos(Math.toRadians(Double.parseDouble(str))));
		return cn;
	}
|/*@bgen(jjtree) sinus */
        {
          SimpleNode jjtn007 = new SimpleNode(JJTSINUS);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
        }
        try {
/*@egen*/ 
	t=<SINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
/*@egen*/       /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		String str2 = t.image;
		str2 = str2.replace("(", "");
		str2 = str2.replace(")", "");
		str2 = str2.replace("sin", "");
		if(!str2.contains("i")) return new ComplexNumber(Math.sin(Math.toRadians(Double.parseDouble(str2))));
		else
		{
			str2 = str2.replace("i", "");
			return new ComplexNumber(0.0, Math.sin(Math.toRadians(Double.parseDouble(str2))));
		}		
	}
|/*@bgen(jjtree) e */
        {
          SimpleNode jjtn008 = new SimpleNode(JJTE);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
        }
        try {
/*@egen*/
	t=<E>/*@bgen(jjtree)*/
        } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
          }
        }
/*@egen*/   /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		String str3 = t.image;
		str3 = str3.replace("e^", "");
		str3 = str3.replace("(", "");
		str3 = str3.replace(")", "");
		str3 = str3.replace("*", "");
		str3 = str3.replace("i", "");
		return new ComplexNumber(Math.cos(Math.toRadians(Double.parseDouble(str3))), Math.sin(Math.toRadians(Double.parseDouble(str3))));
	}
|/*@bgen(jjtree) real_part */
        {
          SimpleNode jjtn009 = new SimpleNode(JJTREAL_PART);
          boolean jjtc009 = true;
          jjtree.openNodeScope(jjtn009);
        }
        try {
/*@egen*/
	<REAL_PART>/*@bgen(jjtree)*/
        } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, true);
          }
        }
/*@egen*/           /*@bgen(jjtree) open_par */
                               {
                                 SimpleNode jjtn010 = new SimpleNode(JJTOPEN_PAR);
                                 boolean jjtc010 = true;
                                 jjtree.openNodeScope(jjtn010);
                               }
                               try {
/*@egen*/ <OPEN_PAR>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc010) {
                                   jjtree.closeNodeScope(jjtn010, true);
                                 }
                               }
/*@egen*/           cn=expression()/*@bgen(jjtree) close_par */
                                                                    {
                                                                      SimpleNode jjtn011 = new SimpleNode(JJTCLOSE_PAR);
                                                                      boolean jjtc011 = true;
                                                                      jjtree.openNodeScope(jjtn011);
                                                                    }
                                                                    try {
/*@egen*/ <CLOSE_PAR>/*@bgen(jjtree)*/
                                                                    } finally {
                                                                      if (jjtc011) {
                                                                        jjtree.closeNodeScope(jjtn011, true);
                                                                      }
                                                                    }
/*@egen*/           /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		cn = new ComplexNumber(cn.getRealPart());
		return cn;
	}
|/*@bgen(jjtree) imaginary_part */
        {
          SimpleNode jjtn012 = new SimpleNode(JJTIMAGINARY_PART);
          boolean jjtc012 = true;
          jjtree.openNodeScope(jjtn012);
        }
        try {
/*@egen*/
	<IMAGINARY_PART>/*@bgen(jjtree)*/
        } finally {
          if (jjtc012) {
            jjtree.closeNodeScope(jjtn012, true);
          }
        }
/*@egen*/                /*@bgen(jjtree) open_par */
                                         {
                                           SimpleNode jjtn013 = new SimpleNode(JJTOPEN_PAR);
                                           boolean jjtc013 = true;
                                           jjtree.openNodeScope(jjtn013);
                                         }
                                         try {
/*@egen*/ <OPEN_PAR>/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc013) {
                                             jjtree.closeNodeScope(jjtn013, true);
                                           }
                                         }
/*@egen*/           cn=expression()/*@bgen(jjtree) close_par */
                                                                              {
                                                                                SimpleNode jjtn014 = new SimpleNode(JJTCLOSE_PAR);
                                                                                boolean jjtc014 = true;
                                                                                jjtree.openNodeScope(jjtn014);
                                                                              }
                                                                              try {
/*@egen*/ <CLOSE_PAR>/*@bgen(jjtree)*/
                                                                              } finally {
                                                                                if (jjtc014) {
                                                                                  jjtree.closeNodeScope(jjtn014, true);
                                                                                }
                                                                              }
/*@egen*/           /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		cn = new ComplexNumber(0.0, cn.getImaginaryPart());
		return cn;
	}
|/*@bgen(jjtree) conjugate */
        {
          SimpleNode jjtn015 = new SimpleNode(JJTCONJUGATE);
          boolean jjtc015 = true;
          jjtree.openNodeScope(jjtn015);
        }
        try {
/*@egen*/
	<CONJUGATE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc015) {
            jjtree.closeNodeScope(jjtn015, true);
          }
        }
/*@egen*/           /*@bgen(jjtree) open_par */
                               {
                                 SimpleNode jjtn016 = new SimpleNode(JJTOPEN_PAR);
                                 boolean jjtc016 = true;
                                 jjtree.openNodeScope(jjtn016);
                               }
                               try {
/*@egen*/ <OPEN_PAR>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc016) {
                                   jjtree.closeNodeScope(jjtn016, true);
                                 }
                               }
/*@egen*/           cn=expression()/*@bgen(jjtree) close_par */
                                                                    {
                                                                      SimpleNode jjtn017 = new SimpleNode(JJTCLOSE_PAR);
                                                                      boolean jjtc017 = true;
                                                                      jjtree.openNodeScope(jjtn017);
                                                                    }
                                                                    try {
/*@egen*/ <CLOSE_PAR>/*@bgen(jjtree)*/
                                                                    } finally {
                                                                      if (jjtc017) {
                                                                        jjtree.closeNodeScope(jjtn017, true);
                                                                      }
                                                                    }
/*@egen*/           /*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		cn = cn.conjugate();
		return cn;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}